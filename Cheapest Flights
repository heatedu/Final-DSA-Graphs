M1 BAcktracking

void dfs(int s,int d,vector<pair<int,int>>adj[],vector<bool>&visited,int &ans,int totalcost,int k)
{
    if(k<-1)
        return;
    if(s==d)
    {
        ans=min(ans,totalcost);
        return;
    }
    visited[s]=true;
    for(auto x:adj[s])
    {
       if(!visited[x.first]&&totalcost+x.second<=ans/*(pruning)*/)
       {
           dfs(x.first,d,adj,visited,ans,totalcost+x.second,k-1);
       }
    }
    visited[s]=false;
}
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>>adj[n];
        for(int i=0;i<flights.size();i++)
        {
            adj[flights[i][0]].push_back(make_pair(flights[i][1],flights[i][2]));
        }
        vector<bool>visited(n,false);
        int ans=INT_MAX;
        dfs(src,dst,adj,visited,ans,0,k);
        if(ans==INT_MAX)
        return -1;
        return ans;
    }
};

M2:DP(bellman ford)

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int s, int d, int K) {
        const int INF = 1e9;
        vector<vector<int>> dp(K + 2, vector<int>(n, INF));
        dp[0][s] = 0;        
         for (int i = 1; i <= K + 1; ++i) {
            dp[i][s] = 0;
            for (const auto& x : flights)
                  dp[i][x[1]] = min(dp[i][x[1]], dp[i-1][x[0]] + x[2]);    
            }
            return dp[K + 1][d] >= INF ? -1 : dp[K + 1][d];
            
        }
};
