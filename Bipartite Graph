class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        queue<int>q;
        int n=graph.size();
        vector<int>color(n,-1);
        for(int i=0;i<n;i++)//for disconneted components 1 for red 0 for green -1 for not assigned any color
        {
            if(color[i]==0||color[i]==1)
                continue;
          color[i]=0;
          q.push(i);
          while(!q.empty())
          {
             int front=q.front();
             q.pop();
             for(int v:graph[front])
             {
                 if(v==front)
                    return false;
                 if(color[v]==color[front])
                    return false;
                 if(color[v]==-1)
                 {
                   color[v]=1-color[front];
                   q.push(v);
                 }
             }
           }
        }
         return true;
    }
};

Following is a simple algorithm to find out whether a given graph is Birpartite or not using Breadth First Search (BFS).
1. Assign RED color to the source vertex (putting into set U).
2. Color all the neighbors with BLUE color (putting into set V).
3. Color all neighborâ€™s neighbor with RED color (putting into set U).
4. This way, assign color to all vertices such that it satisfies all the constraints of m way coloring problem where m = 2.
5. While assigning colors, if we find a neighbor which is colored with same color as current vertex, then the graph cannot be colored with 2 vertices (or graph is not Bipartite)
