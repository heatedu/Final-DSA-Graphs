void addEdge(int u, int v) 
{ 
graph[u].push_back(v); 
indegree[v]++; 
} 
void printOrder(int n, int m) 
{ 
    // Find the topo sort order 
    // using the indegree approach 
  
    // Queue to store the 
    // nodes while processing 
    queue<int> q; 
  
    // Pushing all the vertex in the 
    // queue whose in-degree is 0 
  
    // Update the time of the jobs 
    // who don't require any job to 
    // be completed before this job 
    for (int i = 1; i <= n; i++) { 
        if (indegree[i] == 0) { 
            q.push(i); 
            job[i] = 1; 
        } 
    } 
  
    // Iterate until queue is empty 
    while (!q.empty()) { 
  
        // Get front element of queue 
        int cur = q.front(); 
  
        // Pop the front element 
        q.pop(); 
  
        for (int adj : graph[cur]) { 
  
            // Decrease in-degree of 
            // the current node 
            indegree[adj]--; 
  
            if (job[adj] < 1 + job[cur]) { 
  
                // Update the time 
                job[adj] = max(job[adj], 
                               1 + job[cur]); 
            } 
  
            // Push its adjacent elements 
            if (indegree[adj] == 0) 
                q.push(adj); 
        } 
    } 
  
    // Print the time to complete 
    // the job 
    for (int i = 1; i <= n; i++) 
        cout << job[i] << " "; 
    cout << "\n"; 
} 
